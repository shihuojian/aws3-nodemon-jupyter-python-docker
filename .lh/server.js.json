{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1698116593430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698117013269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             };\n             const filePath = \"/upload\"\n             await exitsFolder(filePath);\n             const filePathName = Path.join(process.cwd(),`${filePath}/${name}`)\n-            await file.promises.pipe(Fs.createWriteStream(filePathName));\n+            await file.pipe(Fs.createWriteStream(filePathName));\n             return h.response('success');\n             \n         }\n     });\n"
                },
                {
                    "date": 1698119448243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,12 +101,25 @@\n                 } catch (e) {\n                 await Fs.promises.mkdir(absPath, {recursive: true});\n                 }\n             };\n-            const filePath = \"/upload\"\n+\n+            //同步写入文件流\n+            const asynWriteFile = async (readStream,filePath)=>{\n+                return new Promise(resolve=>{\n+                    const stream = Fs.createWriteStream(filePath);\n+                    readStream.pipe(stream);\n+                    stream.on('close', function (err) {\n+                        resolve()\n+                    });\n+                })\n+            }\n+\n+            let filePath = \"/upload\"\n             await exitsFolder(filePath);\n-            const filePathName = Path.join(process.cwd(),`${filePath}/${name}`)\n-            await file.pipe(Fs.createWriteStream(filePathName));\n+            filePath = Path.join(process.cwd(),`${filePath}/${name}`);\n+            // await file.pipe(Fs.createWriteStream(filePathName)); //异步写入文件\n+            await asynWriteFile(file,filePath)\n             return h.response('success');\n             \n         }\n     });\n"
                }
            ],
            "date": 1698116593430,
            "name": "Commit-0",
            "content": "'use strict';\n\nconst Hapi = require('@hapi/hapi');\nconst os = require('node:os');\nconst util = require('node:util');\nconst child_process = require(\"node:child_process\");\nconst exec = util.promisify(child_process.exec);\nconst spawn = child_process.spawn;\nconst spawnSync = child_process.spawnSync;\nconst Boom = require('@hapi/boom');\nconst Hoek = require('@hapi/hoek');\nconst Fs = require('node:fs');\nconst Path = require('node:path');\nconst { getSignedUrl } = require(\"@aws-sdk/s3-request-presigner\");\nconst Request = require('request');\nconst { S3Client, GetObjectCommand,PutObjectCommand, ListObjectsV2Command, DeleteObjectCommand } = require(\"@aws-sdk/client-s3\");\nconst s3Client = new S3Client({\n    region:\"ap-east-1\",\n    credentials:{\n        accessKeyId:\"AKIAQ5QAJCD2C3HB2TXB\",\n        secretAccessKey:\"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\"\n    }\n})\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 8888,\n        host: '0.0.0.0'  //服务器运行填写私有地址\n    });\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: { html: require('handlebars') },\n        path: __dirname + '/templates'\n    });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        handler: async (request, h)=> {\n            const context = {title: 'RVc'};\n            return h.view('index', context);\n        }\n    });\n\n    //node 执行shell并传递参数给python实例\n    server.route({\n        method: 'GET',\n        path: '/shell',\n        handler: async (request, h)=> {\n            const shell = async (d,cmd)=>{\n                const shellSync = async ()=>{\n                    return new Promise(resolve => {\n                        const res = spawn(d, cmd); \n                        const result = {};\n                        res.stdout.on('data', (data) => {\n                            console.log(`stdout: ${data}`);\n                        })\n                        res.stderr.on('data', (data) => {\n                            result.message = data\n                            console.error(`stderr: ${data}`);\n                        });\n                        res.on('close', (code) => {\n                            result.status = !code\n                            resolve(result)\n                            console.log(`child process exited with code ${code}`);\n                        });\n                    }); \n                } \n                let {status,message} = await shellSync();\n                if(!status){ throw Boom.badRequest(message)}\n            }    \n            await shell('node',['test.js']);\n            await shell('python3',['test.py',`--dir=testdir`,`--name=testname`]);\n            return h.response('shell');\n        }\n    });\n\n    //上传到本地文件\n    server.route({\n        method: 'POST',\n        path: '/upload',\n        options:{\n            payload: {\n                output: 'stream',                                           //参考https://hapijs.com/api#-routeoptionspayloadoutput\n                parse:true,\n                multipart: true,\n                maxBytes:1048576 * 50,     //允许上传 50mb\n                timeout:1000 * 60            //上传超时默认60秒\n            },\n        },\n        handler: async (request, h)=> {\n            const {file} = request.payload;\n            const name = file.hapi.filename;\n            //判断文件夹是否存在，不存在创建\n            const exitsFolder = async (reaPath)=>{\n                const absPath = Path.join(process.cwd(), reaPath);\n                try {\n                await Fs.promises.stat('absPath');\n                } catch (e) {\n                await Fs.promises.mkdir(absPath, {recursive: true});\n                }\n            };\n            const filePath = \"/upload\"\n            await exitsFolder(filePath);\n            const filePathName = Path.join(process.cwd(),`${filePath}/${name}`)\n            await file.promises.pipe(Fs.createWriteStream(filePathName));\n            return h.response('success');\n            \n        }\n    });\n\n    //aws3 实例\n    server.route({\n        method: 'POST',\n        path: '/aws3',\n        options:{\n            payload: {\n                output: 'stream',          //可以设置data,file等                                 //参考https://hapijs.com/api#-routeoptionspayloadoutput\n                parse:true,\n                multipart: true,\n                maxBytes:1048576 * 100,     //允许上传 50mb\n                timeout:1000 * 60            //上传超时默认60秒\n            },\n        },\n        handler: async (request, h)=> {\n            try {\n                \n                //从bucket获取一张图片，并在60m后过期\n                const getObjectURL = async (Key)=>{\n                    const command = new GetObjectCommand({\n                        Bucket:\"shihuojian-private-test\",\n                        Key\n                    });\n                    return await getSignedUrl(s3Client,command,{ expiresIn: 60 });\n                }\n                // const res = await getObjectURL('upload/image-1697713779579.jpeg');\n\n                //生成一个临时上传文件url接口，有效期10s,不设置貌似900s后过期\n                const putObject = async (filename,ContentType)=>{\n                    const command = new PutObjectCommand({\n                        Bucket:\"shihuojian-private-test\",\n                        Key:`upload/${filename}`,\n                        ContentType\n                    });\n                    return await getSignedUrl(s3Client,command,{ expiresIn: 60 });\n                }\n                // const res = await putObject(`image-${Date.now()}.jpeg`,\"image/jpeg\")\n\n                //列出/目录\n                const listObjects = async ()=>{\n                    const command = new ListObjectsV2Command({\n                        Bucket:\"shihuojian-private-test\",\n                        Key:`/`\n                    });\n                    return await s3Client.send(command);\n                }\n                // const res = await listObjects();\n\n                //删除文件,有问题因为key暴露给github，被aws检测到了自动增加了防止删除策略。\n                const delObjects = async ()=>{\n                    const command = new DeleteObjectCommand({\n                        Bucket:\"shihuojian-private-test\",\n                        Key:'3.png'\n                    });\n                    await s3Client.send(command);\n                }\n                // const res = await delObjects();\n\n                //上传文件\n                const uploadObject = async(Key,Body,ContentType)=>{\n                    const command = new PutObjectCommand({\n                        Bucket:\"shihuojian-private-test\",Key,Body,ContentType\n                    });\n                    return await s3Client.send(command)\n                }\n                const file = request.payload.file;\n                const name = `${Date.now()}-${Path.basename(file.hapi.filename)}`;  //如果是模型的话需要固定名称，不然训练有问题,\n                await uploadObject(name,file._data,file.hapi.headers[\"content-type\"]);\n                const url = await getObjectURL(name);   //获取到的图片无法访问，需要apn，解决办法可以在服务器获取数据流输出\n                const base64 = Buffer.from(url).toString('base64');\n                return h.response(base64);\n\n            } catch (error) {\n                throw Boom.badRequest(error)\n            }    \n            \n        }\n    });\n\n    //直接输出stream，可以国内限制以及破解防盗链等\n    server.route({\n        method: 'GET',\n        path: '/url/{url}',\n        handler: async (request, h)=> {\n            try{\n                const url = request.params.url;\n                if(url){\n                    Request.get(Buffer.from(url, 'base64').toString('ascii').replace(/&amp;/g,\"&\")).pipe(request.raw.res);\n                    return h.abandon\n                }else{\n                    return h.close\n                }\n            } catch (error) {\n                throw Boom.badRequest(error)\n            }    \n        }\n    });\n\n\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\nprocess.on('unhandledRejection', (err) => {\n    console.log(err);\n    process.exit(1);\n});\n\ninit();"
        }
    ]
}